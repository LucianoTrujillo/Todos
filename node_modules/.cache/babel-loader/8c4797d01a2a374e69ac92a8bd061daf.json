{"ast":null,"code":"import { normalize, schema } from 'normalizr';\nvar API = {\n  id: 1,\n  title: \"Blog Title\",\n  content: \"Some really short blog content.  Actually the least interesting post ever\",\n  created_at: \"2016-01-10T23:07:43.248Z\",\n  updated_at: '2016-01-10T23:07:43.248Z',\n  author: {\n    id: 81,\n    name: \"Mr Shelby\"\n  },\n  comments: [{\n    id: 352,\n    content: \"First!\",\n    author: {\n      id: 41,\n      name: \"Foo Bar\"\n    }\n  }]\n};\nexport var normalizeTodos = function normalizeTodos(data) {\n  var postSchema = new schema.Entity('posts');\n  var postAuthorSchema = new schema.Entity('postAuthors');\n  var commentSchema = new schema.Entity('comments');\n  var CommentAuthorSchema = new schema.Entity('commentAuthors');\n  var typeList = new schema.Entity('todoTypes');\n  var todo = new schema.Entity('todos'); // Here we define relationships between each resource/schema/entity\n  // (or whatever you feel like calling them these days)\n  // The post resource in our API response has an author and comments as children\n\n  typeList.define({\n    todos: [commentSchema]\n  }); // Each comment has an author\n\n  commentSchema.define({\n    author: CommentAuthorSchema\n  });\n  var result = normalize(data, postSchema);\n  console.log(result);\n};","map":{"version":3,"sources":["C:\\Users\\lulet\\Desktop\\Platzi\\todoapp\\src\\Schemas\\index.jsx"],"names":["normalize","schema","API","id","title","content","created_at","updated_at","author","name","comments","normalizeTodos","data","postSchema","Entity","postAuthorSchema","commentSchema","CommentAuthorSchema","typeList","todo","define","todos","result","console","log"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,WAAhC;AAEA,IAAMC,GAAG,GAAG;AACVC,EAAAA,EAAE,EAAE,CADM;AAEVC,EAAAA,KAAK,EAAE,YAFG;AAGVC,EAAAA,OAAO,EAAE,2EAHC;AAIVC,EAAAA,UAAU,EAAE,0BAJF;AAKVC,EAAAA,UAAU,EAAE,0BALF;AAMVC,EAAAA,MAAM,EAAE;AACJL,IAAAA,EAAE,EAAE,EADA;AAEJM,IAAAA,IAAI,EAAE;AAFF,GANE;AAUVC,EAAAA,QAAQ,EAAE,CACN;AACIP,IAAAA,EAAE,EAAE,GADR;AAEIE,IAAAA,OAAO,EAAE,QAFb;AAGIG,IAAAA,MAAM,EAAE;AACJL,MAAAA,EAAE,EAAE,EADA;AAEJM,MAAAA,IAAI,EAAE;AAFF;AAHZ,GADM;AAVA,CAAZ;AAsBA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAEtC,MAAMC,UAAU,GAAG,IAAIZ,MAAM,CAACa,MAAX,CAAkB,OAAlB,CAAnB;AACA,MAAMC,gBAAgB,GAAG,IAAId,MAAM,CAACa,MAAX,CAAkB,aAAlB,CAAzB;AACA,MAAME,aAAa,GAAG,IAAIf,MAAM,CAACa,MAAX,CAAkB,UAAlB,CAAtB;AACA,MAAMG,mBAAmB,GAAG,IAAIhB,MAAM,CAACa,MAAX,CAAkB,gBAAlB,CAA5B;AAEA,MAAMI,QAAQ,GAAG,IAAIjB,MAAM,CAACa,MAAX,CAAkB,WAAlB,CAAjB;AACA,MAAMK,IAAI,GAAG,IAAIlB,MAAM,CAACa,MAAX,CAAkB,OAAlB,CAAb,CARsC,CAUtC;AACA;AAEA;;AACAI,EAAAA,QAAQ,CAACE,MAAT,CAAgB;AACZC,IAAAA,KAAK,EAAE,CAAEL,aAAF;AADK,GAAhB,EAdsC,CAkBtC;;AACAA,EAAAA,aAAa,CAACI,MAAd,CAAqB;AACjBZ,IAAAA,MAAM,EAAES;AADS,GAArB;AAIA,MAAMK,MAAM,GAAGtB,SAAS,CAACY,IAAD,EAAOC,UAAP,CAAxB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,CAzBM","sourcesContent":["import {normalize, schema} from 'normalizr';\r\n\r\nconst API = {\r\n  id: 1,\r\n  title: \"Blog Title\",\r\n  content: \"Some really short blog content.  Actually the least interesting post ever\",\r\n  created_at: \"2016-01-10T23:07:43.248Z\",\r\n  updated_at: '2016-01-10T23:07:43.248Z',\r\n  author: {\r\n      id: 81,\r\n      name: \"Mr Shelby\"\r\n  },\r\n  comments: [\r\n      {\r\n          id: 352,\r\n          content: \"First!\",\r\n          author: {\r\n              id: 41,\r\n              name: \"Foo Bar\"\r\n          }\r\n      }\r\n  ]\r\n}\r\n\r\nexport const normalizeTodos = (data) => {\r\n\r\n  const postSchema = new schema.Entity('posts');\r\n  const postAuthorSchema = new schema.Entity('postAuthors');\r\n  const commentSchema = new schema.Entity('comments');\r\n  const CommentAuthorSchema = new schema.Entity('commentAuthors');\r\n\r\n  const typeList = new schema.Entity('todoTypes');\r\n  const todo = new schema.Entity('todos');\r\n\r\n  // Here we define relationships between each resource/schema/entity\r\n  // (or whatever you feel like calling them these days)\r\n\r\n  // The post resource in our API response has an author and comments as children\r\n  typeList.define({\r\n      todos: [ commentSchema ]\r\n  });\r\n\r\n  // Each comment has an author\r\n  commentSchema.define({\r\n      author: CommentAuthorSchema\r\n  });\r\n\r\n  const result = normalize(data, postSchema);\r\n  console.log(result);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}