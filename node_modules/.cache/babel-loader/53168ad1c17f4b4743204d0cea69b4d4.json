{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\lulet\\\\Desktop\\\\Platzi\\\\todoapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { normalize, schema } from 'normalizr';\n\nnormalizeTodos = function normalizeTodos(store) {\n  var todo = new schema.Entity('todos', {}, {\n    idAttribute: 'id',\n    processStrategy: function processStrategy(value, parent, key) {\n      return _objectSpread({}, value, {\n        id: parent.id\n      });\n    }\n  });\n  var ids = new schema.Entity('ids', {\n    todos: new schema.Array(todo)\n  });\n  var flattened = {\n    ids: new schema.Array(ids)\n  };\n  var normalizedData = normalize(store, flattened);\n  return normalizedData;\n};\n\nexport default normalizeTodos;","map":{"version":3,"sources":["C:\\Users\\lulet\\Desktop\\Platzi\\todoapp\\src\\Schemas\\index.jsx"],"names":["normalize","schema","normalizeTodos","store","todo","Entity","idAttribute","processStrategy","value","parent","key","id","ids","todos","Array","flattened","normalizedData"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,WAAhC;;AAEAC,cAAc,GAAG,wBAACC,KAAD,EAAW;AAE1B,MAAMC,IAAI,GAAG,IAAIH,MAAM,CAACI,MAAX,CAAkB,OAAlB,EAA2B,EAA3B,EAA+B;AAC1CC,IAAAA,WAAW,EAAE,IAD6B;AAE1CC,IAAAA,eAAe,EAAE,yBAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB;AAAA,+BAA6BF,KAA7B;AAAoCG,QAAAA,EAAE,EAAEF,MAAM,CAACE;AAA/C;AAAA;AAFyB,GAA/B,CAAb;AAKA,MAAMC,GAAG,GAAG,IAAIX,MAAM,CAACI,MAAX,CAAkB,KAAlB,EAAyB;AACnCQ,IAAAA,KAAK,EAAE,IAAIZ,MAAM,CAACa,KAAX,CAAiBV,IAAjB;AAD4B,GAAzB,CAAZ;AAIA,MAAMW,SAAS,GAAG;AAAEH,IAAAA,GAAG,EAAE,IAAIX,MAAM,CAACa,KAAX,CAAiBF,GAAjB;AAAP,GAAlB;AAEA,MAAMI,cAAc,GAAGhB,SAAS,CAACG,KAAD,EAAQY,SAAR,CAAhC;AAEA,SAAOC,cAAP;AACD,CAhBD;;AAmBA,eAAed,cAAf","sourcesContent":["import {normalize, schema} from 'normalizr';\r\n\r\nnormalizeTodos = (store) => {\r\n\r\n  const todo = new schema.Entity('todos', {}, {\r\n    idAttribute: 'id',\r\n    processStrategy: (value, parent, key) => ({...value, id: parent.id })\r\n  });\r\n  \r\n  const ids = new schema.Entity('ids', {\r\n    todos: new schema.Array(todo)\r\n  });\r\n  \r\n  const flattened = { ids: new schema.Array(ids)};\r\n  \r\n  const normalizedData = normalize(store, flattened);\r\n\r\n  return normalizedData;\r\n}\r\n\r\n\r\nexport default normalizeTodos;"]},"metadata":{},"sourceType":"module"}