{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\lulet\\\\Desktop\\\\Platzi\\\\todoapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { normalize, schema } from 'normalizr';\nexport var normalizeTodos = function normalizeTodos(_ref) {\n  var todos = _ref.todos;\n  var todo = new schema.Entity('todos', {}, {\n    idAttribute: 'id',\n    processStrategy: function processStrategy(value, parent, key) {\n      return _objectSpread({}, value, {\n        id: parent.id\n      });\n    }\n  });\n  var stage = new schema.Entity('stages', {\n    todos: [todo]\n  });\n  var flattened = {\n    ids: new schema.Object(ids)\n  };\n  var normalizedData = normalize(store, flattened);\n  return normalizedData;\n};","map":{"version":3,"sources":["C:\\Users\\lulet\\Desktop\\Platzi\\todoapp\\src\\Schemas\\index.jsx"],"names":["normalize","schema","normalizeTodos","todos","todo","Entity","idAttribute","processStrategy","value","parent","key","id","stage","flattened","ids","Object","normalizedData","store"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,WAAhC;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAEzC,MAAMC,IAAI,GAAG,IAAIH,MAAM,CAACI,MAAX,CAAkB,OAAlB,EAA2B,EAA3B,EAA+B;AAC1CC,IAAAA,WAAW,EAAE,IAD6B;AAE1CC,IAAAA,eAAe,EAAE,yBAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB;AAAA,+BAA6BF,KAA7B;AAAoCG,QAAAA,EAAE,EAAEF,MAAM,CAACE;AAA/C;AAAA;AAFyB,GAA/B,CAAb;AAKA,MAAMC,KAAK,GAAG,IAAIX,MAAM,CAACI,MAAX,CAAkB,QAAlB,EAA4B;AACxCF,IAAAA,KAAK,EAAE,CAAEC,IAAF;AADiC,GAA5B,CAAd;AAIA,MAAMS,SAAS,GAAG;AAAEC,IAAAA,GAAG,EAAE,IAAIb,MAAM,CAACc,MAAX,CAAkBD,GAAlB;AAAP,GAAlB;AAEA,MAAME,cAAc,GAAGhB,SAAS,CAACiB,KAAD,EAAQJ,SAAR,CAAhC;AAEA,SAAOG,cAAP;AACD,CAhBM","sourcesContent":["import {normalize, schema} from 'normalizr';\r\n\r\nexport const normalizeTodos = ({todos}) => {\r\n\r\n  const todo = new schema.Entity('todos', {}, {\r\n    idAttribute: 'id',\r\n    processStrategy: (value, parent, key) => ({...value, id: parent.id })\r\n  });\r\n  \r\n  const stage = new schema.Entity('stages', {\r\n    todos: [ todo ]\r\n  });\r\n  \r\n  const flattened = { ids: new schema.Object(ids)};\r\n  \r\n  const normalizedData = normalize(store, flattened);\r\n\r\n  return normalizedData;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}