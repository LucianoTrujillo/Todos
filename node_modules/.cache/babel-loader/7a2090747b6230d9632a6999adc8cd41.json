{"ast":null,"code":"import { normalize, schema } from 'normalizr';\nvar API = {\n  id: 1,\n  title: \"Blog Title\",\n  content: \"Some really short blog content.  Actually the least interesting post ever\",\n  created_at: \"2016-01-10T23:07:43.248Z\",\n  updated_at: '2016-01-10T23:07:43.248Z',\n  author: {\n    id: 81,\n    name: \"Mr Shelby\"\n  },\n  comments: [{\n    id: 352,\n    content: \"First!\",\n    author: {\n      id: 41,\n      name: \"Foo Bar\"\n    }\n  }]\n};\nexport var normalizeTodos = function normalizeTodos() {\n  var postSchema = new schema.Entity('posts');\n  var postAuthorSchema = new schema.Entity('postAuthors');\n  var commentSchema = new schema.Entity('comments');\n  var CommentAuthorSchema = new schema.Entity('commentAuthors'); // Here we define relationships between each resource/schema/entity\n  // (or whatever you feel like calling them these days)\n  // The post resource in our API response has an author and comments as children\n\n  postSchema.define({\n    author: postAuthorSchema,\n    comments: [commentSchema]\n  }); // Each comment has an author\n\n  commentSchema.define({\n    author: CommentAuthorSchema\n  });\n  var result = normalize(API, postSchema);\n  console.log(result);\n};","map":{"version":3,"sources":["C:\\Users\\lulet\\Desktop\\Platzi\\todoapp\\src\\Schemas\\index.jsx"],"names":["normalize","schema","API","id","title","content","created_at","updated_at","author","name","comments","normalizeTodos","postSchema","Entity","postAuthorSchema","commentSchema","CommentAuthorSchema","define","result","console","log"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,WAAhC;AAEA,IAAMC,GAAG,GAAG;AACVC,EAAAA,EAAE,EAAE,CADM;AAEVC,EAAAA,KAAK,EAAE,YAFG;AAGVC,EAAAA,OAAO,EAAE,2EAHC;AAIVC,EAAAA,UAAU,EAAE,0BAJF;AAKVC,EAAAA,UAAU,EAAE,0BALF;AAMVC,EAAAA,MAAM,EAAE;AACJL,IAAAA,EAAE,EAAE,EADA;AAEJM,IAAAA,IAAI,EAAE;AAFF,GANE;AAUVC,EAAAA,QAAQ,EAAE,CACN;AACIP,IAAAA,EAAE,EAAE,GADR;AAEIE,IAAAA,OAAO,EAAE,QAFb;AAGIG,IAAAA,MAAM,EAAE;AACJL,MAAAA,EAAE,EAAE,EADA;AAEJM,MAAAA,IAAI,EAAE;AAFF;AAHZ,GADM;AAVA,CAAZ;AAsBA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAElC,MAAMC,UAAU,GAAG,IAAIX,MAAM,CAACY,MAAX,CAAkB,OAAlB,CAAnB;AACA,MAAMC,gBAAgB,GAAG,IAAIb,MAAM,CAACY,MAAX,CAAkB,aAAlB,CAAzB;AACA,MAAME,aAAa,GAAG,IAAId,MAAM,CAACY,MAAX,CAAkB,UAAlB,CAAtB;AACA,MAAMG,mBAAmB,GAAG,IAAIf,MAAM,CAACY,MAAX,CAAkB,gBAAlB,CAA5B,CALkC,CAOlC;AACA;AAEA;;AACAD,EAAAA,UAAU,CAACK,MAAX,CAAkB;AACdT,IAAAA,MAAM,EAAEM,gBADM;AAEdJ,IAAAA,QAAQ,EAAE,CAAEK,aAAF;AAFI,GAAlB,EAXkC,CAgBlC;;AACAA,EAAAA,aAAa,CAACE,MAAd,CAAqB;AACjBT,IAAAA,MAAM,EAAEQ;AADS,GAArB;AAIA,MAAME,MAAM,GAAGlB,SAAS,CAACE,GAAD,EAAMU,UAAN,CAAxB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,CAvBM","sourcesContent":["import {normalize, schema} from 'normalizr';\r\n\r\nconst API = {\r\n  id: 1,\r\n  title: \"Blog Title\",\r\n  content: \"Some really short blog content.  Actually the least interesting post ever\",\r\n  created_at: \"2016-01-10T23:07:43.248Z\",\r\n  updated_at: '2016-01-10T23:07:43.248Z',\r\n  author: {\r\n      id: 81,\r\n      name: \"Mr Shelby\"\r\n  },\r\n  comments: [\r\n      {\r\n          id: 352,\r\n          content: \"First!\",\r\n          author: {\r\n              id: 41,\r\n              name: \"Foo Bar\"\r\n          }\r\n      }\r\n  ]\r\n}\r\n\r\nexport const normalizeTodos = () => {\r\n\r\n  const postSchema = new schema.Entity('posts');\r\n  const postAuthorSchema = new schema.Entity('postAuthors');\r\n  const commentSchema = new schema.Entity('comments');\r\n  const CommentAuthorSchema = new schema.Entity('commentAuthors');\r\n\r\n  // Here we define relationships between each resource/schema/entity\r\n  // (or whatever you feel like calling them these days)\r\n\r\n  // The post resource in our API response has an author and comments as children\r\n  postSchema.define({\r\n      author: postAuthorSchema,\r\n      comments: [ commentSchema ]\r\n  });\r\n\r\n  // Each comment has an author\r\n  commentSchema.define({\r\n      author: CommentAuthorSchema\r\n  });\r\n\r\n  const result = normalize(API, postSchema);\r\n  console.log(result);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}