{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\lulet\\\\Desktop\\\\Platzi\\\\todoapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { normalize, schema } from 'normalizr';\nimport store from '../index';\nvar originalData = store.getState();\nvar todo = new schema.Entity('todos', {}, {\n  idAttribute: 'id',\n  processStrategy: function processStrategy(value, parent, key) {\n    return _objectSpread({}, value, {\n      id: parent.id\n    });\n  }\n});\nvar ids = new schema.Entity('ids', {\n  todos: new schema.Array(todo)\n});\nvar flattened = {\n  ids: new schema.Array(ids)\n};\nvar normalizedData = normalize(originalData, flattened);\nexport default normalizedData;","map":{"version":3,"sources":["C:\\Users\\lulet\\Desktop\\Platzi\\todoapp\\src\\Schemas\\index.jsx"],"names":["normalize","schema","store","originalData","getState","todo","Entity","idAttribute","processStrategy","value","parent","key","id","ids","todos","Array","flattened","normalizedData"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,EAArB;AAEA,IAAMC,IAAI,GAAG,IAAIJ,MAAM,CAACK,MAAX,CAAkB,OAAlB,EAA2B,EAA3B,EAA+B;AAC1CC,EAAAA,WAAW,EAAE,IAD6B;AAE1CC,EAAAA,eAAe,EAAE,yBAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB;AAAA,6BAA6BF,KAA7B;AAAoCG,MAAAA,EAAE,EAAEF,MAAM,CAACE;AAA/C;AAAA;AAFyB,CAA/B,CAAb;AAKA,IAAMC,GAAG,GAAG,IAAIZ,MAAM,CAACK,MAAX,CAAkB,KAAlB,EAAyB;AACnCQ,EAAAA,KAAK,EAAE,IAAIb,MAAM,CAACc,KAAX,CAAiBV,IAAjB;AAD4B,CAAzB,CAAZ;AAIA,IAAMW,SAAS,GAAG;AAAEH,EAAAA,GAAG,EAAE,IAAIZ,MAAM,CAACc,KAAX,CAAiBF,GAAjB;AAAP,CAAlB;AAEA,IAAMI,cAAc,GAAGjB,SAAS,CAACG,YAAD,EAAea,SAAf,CAAhC;AAEA,eAAeC,cAAf","sourcesContent":["import {normalize, schema} from 'normalizr';\r\nimport store from '../index';\r\n\r\nconst originalData = store.getState();\r\n\r\nconst todo = new schema.Entity('todos', {}, {\r\n  idAttribute: 'id',\r\n  processStrategy: (value, parent, key) => ({...value, id: parent.id })\r\n});\r\n\r\nconst ids = new schema.Entity('ids', {\r\n  todos: new schema.Array(todo)\r\n});\r\n\r\nconst flattened = { ids: new schema.Array(ids)};\r\n\r\nconst normalizedData = normalize(originalData, flattened);\r\n\r\nexport default normalizedData;"]},"metadata":{},"sourceType":"module"}